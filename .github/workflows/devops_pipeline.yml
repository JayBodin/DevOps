name: DevOps Pipeline

on:
  workflow_dispatch: # Gör att pipelinen kan triggas manuellt
    inputs:
      log_errors:
        description: 'Logga fel om tester misslyckas'
        required: true
        default: 'true'

env:
  # Definiera miljövariabler som kan användas genom pipelinen
  API_URL: 'https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/18.021515/lat/59.30996/data.json'
  DOCKER_IMAGE_NAME: 'ditt_dockerhub_användarnamn/ditt_image_namn'
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  # Jobb för att köra enhetstester och integrationstester
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit and integration tests
        run: |
          python -m unittest discover -s . -p '*_test.py'

      - name: Log errors if tests fail
        if: ${{ inputs.log_errors == 'true' }} && failure()
        run: |
          echo "Genererar en loggfil eftersom testerna misslyckades."
          echo "Lagrar loggfiler..."
        # Exempel på hur en logg-fil kan sparas som artefakt
        if: ${{ inputs.log_errors == 'true' }} && failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: /path/till/logg-filer

  # Bygg-jobb som beroende av att testerna godkänns
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}

  # Distributionsjobb beroende av att build-jobbet lyckas
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Deploy Docker image to Azure App Service
        run: |
          az webapp create --resource-group din_resursgrupp --plan din_plan --name ditt_appnamn --deployment-container-image-name ${{ env.DOCKER_IMAGE_NAME }}
